# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GqYcK1Nu2M14ipBvpwKr_a0X_DPAv3Ga
"""

# CODE FOR IMAGE SAVE:

import cv2
import os

def capture_face(name):
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Could not open webcam.")
        return

    print(f"Capturing face for {name}. Press 's' to save and 'q' to quit without saving.")
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Could not read frame.")
            break

        # Display the frame
        cv2.imshow('Capture Face', frame)

        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):
            # Save the frame as an image
            known_faces_dir = 'known_faces'
            if not os.path.exists(known_faces_dir):
                os.makedirs(known_faces_dir)
            image_path = os.path.join(known_faces_dir, f"{name}.jpg")
            cv2.imwrite(image_path, frame)
            print(f"Saved {name}'s face to {image_path}")
            break
        elif key == ord('q'):
            print("Quit without saving.")
            break

    cap.release()
    cv2.destroyAllWindows()

# Example usage
name = input("Enter the name of the person to authorize: ")
capture_face(name)

# MAIN CODE:

import cv2
import face_recognition
import pyttsx3
import numpy as np
import os
import time

# Initialize text-to-speech engine
tts_engine = pyttsx3.init()
tts_engine.setProperty('rate', 150)  # Set speech rate
tts_engine.setProperty('volume', 0.9)  # Set volume level

# Load known faces and their names
known_face_encodings = []
known_face_names = []

# Path to known faces directory
known_faces_dir = 'known_faces'

# Check if known faces directory exists
if not os.path.exists(known_faces_dir):
    os.makedirs(known_faces_dir)
    print(f"Directory '{known_faces_dir}' created. Please add images of known individuals and rerun the script.")
    exit()

# Load known faces from the directory
for file_name in os.listdir(known_faces_dir):
    image_path = os.path.join(known_faces_dir, file_name)
    image = face_recognition.load_image_file(image_path)
    face_encodings = face_recognition.face_encodings(image)
    if face_encodings:  # Ensure there's at least one face encoding
        known_face_encodings.append(face_encodings[0])
        known_face_names.append(os.path.splitext(file_name)[0])

# Check if any known faces were loaded
if not known_face_encodings:
    print("No known faces loaded. Please add images of known individuals to the 'known_faces' directory and rerun the script.")
    exit()

def detect_features():
    cap = cv2.VideoCapture(0)  # Change the index if your webcam is not at index 0

    if not cap.isOpened():
        print("Error: Could not open webcam.")
        return

    last_announcement_time = 0
    announcement_delay = 10  # seconds

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Could not read frame.")
            break

        # Flip the image horizontally for a later selfie-view display
        frame = cv2.flip(frame, 1)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Resize frame to improve speed
        small_frame = cv2.resize(rgb_frame, (640, 480))

        # Detect faces
        face_locations = face_recognition.face_locations(small_frame)
        face_encodings = face_recognition.face_encodings(small_frame, face_locations)

        for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
            name = "Unknown"

            if True in matches:
                face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
                best_match_index = np.argmin(face_distances)
                if matches[best_match_index]:
                    name = known_face_names[best_match_index]
                    current_time = time.time()
                    if current_time - last_announcement_time > announcement_delay:
                        tts_engine.say(f"Hello, {name}")
                        tts_engine.runAndWait()
                        last_announcement_time = current_time
            else:
                # Save unknown face
                unknown_face_dir = 'unknown_faces'
                if not os.path.exists(unknown_face_dir):
                    os.makedirs(unknown_face_dir)
                unknown_face_path = os.path.join(unknown_face_dir, f"unknown_{top}{right}{bottom}_{left}.jpg")
                cv2.imwrite(unknown_face_path, frame[top:bottom, left:right])
                current_time = time.time()
                if current_time - last_announcement_time > announcement_delay:
                    tts_engine.say("Unauthorized person detected")
                    tts_engine.runAndWait()
                    last_announcement_time = current_time

            # Draw a box around the face
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            # Draw a label with a name below the face
            cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 255, 0), cv2.FILLED)
            font = cv2.FONT_HERSHEY_DUPLEX
            cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.9, (255, 255, 255), 1)

        cv2.imshow('HomeSecurity', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# Example usage
detect_features()